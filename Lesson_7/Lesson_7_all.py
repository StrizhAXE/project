# 1. -------------------------------------------------------------------------------------------------------------------
# Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()),
# который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц вы найдете в методичке.
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix
# (двух матриц). Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы
# складываем с первым элементом первой строки второй матрицы и т.д.

class Matrix:
    """ Обработка данных списков и формирование матрицы """
    def __init__(self, list_of_lists):
        self.matrix = list_of_lists
        # print(self.matrix)

    def __str__(self):
        self.val = (lists for lists in self.matrix)
        for var in self.val:
            print(f"{var}")
        return "\n"

    def __add__(self, other):
        sum_mt = []
        for i in range(len(self.matrix)):
            temp_mt = []
            for j in range(len(self.matrix[i])):
                i_j = self.matrix[i][j] + other.matrix[i][j]
                temp_mt.append(i_j)
            sum_mt.append(temp_mt)
        return sum_mt


data1 = [[1, 2, 3], [4, 5, 6, 7], [0, -1, -2]]
data2 = [[1, 1, 1], [2, 2, 2, 2], [3, 3, 3]]
# print(data, type(data))
mt1 = Matrix(data1)
mt2 = Matrix(data2)
print(f"Матрица 1{mt1}")
print(f"Матрица 2{mt2}")
sum_data = mt1 + mt2
print(f"Сумарная матрица{Matrix(sum_data)}")

# 2. -------------------------------------------------------------------------------------------------------------------
# Реализовать проект расчета суммарного расхода ткани на производство одежды.
# Основная сущность (класс) этого проекта — одежда, которая может иметь определенное название.
# К типам одежды в этом проекте относятся пальто и костюм. У этих типов одежды существуют параметры:
# размер (для пальто) и рост (для костюма). Это могут быть обычные числа: V и H, соответственно.
# Для определения расхода ткани по каждому типу одежды использовать формулы:
# для пальто (V/6.5 + 0.5), для костюма (2 * H + 0.3). Проверить работу этих методов на реальных данных.
# Реализовать общий подсчет расхода ткани. Проверить на практике полученные на этом уроке знания:
# реализовать абстрактные классы для основных классов проекта, проверить на практике работу декоратора @property

from abc import abstractmethod


class Cloves:
    """ Рассчет ткани для пошива"""
    def __init__(self, prod_name, size=0.0, height=0.0, num=1):
        self.prod_name = prod_name
        self.size = size
        self.height = height
        self.number = num

    @abstractmethod
    def textile(self):
        global total_txl
        if str.lower(self.prod_name) == "польто":
            num_textile = (self.size/6.5 + 0.5) * self.number
        elif str. lower(self.prod_name) == "костюм":
            num_textile = (self.height * 2 + 0.3) * self.number
        else:
            return f"Неподходящее изделие для рассчета"
        if isinstance(num_textile, (float, int)):
            total_txl += num_textile
        return round(num_textile, 1)

    @property
    def about(self):
        return f"Программа для расчета ткани"


total_txl = 0
txl = Cloves("польто", size=45, num=5)
txl1 = Cloves("Костюм", height=1.8)
txl2 = Cloves("Тапки", 42)

print(f"Польто: {txl.textile()}")
print(f"Костюм: {txl1.textile()}")
print(f"Тапки: {txl2.textile()}")
print(f"Всего ткани: {round(total_txl, 1)}")
print(txl.about)

# 3. -------------------------------------------------------------------------------------------------------------------
# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток
# Вычитание. Участвуют две клетки. Необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.

class Cells:
    def __init__(self, n_cells):
        self.n_cells = n_cells
        print(f"Клетка: {self.n_cells}# - {'*' * n_cells}")

    def __add__(self, other):
        n = (self.n_cells + other.n_cells)
        return f"{n}# - {'* ' * n}"

    def __sub__(self, other):
        if self.n_cells > other.n_cells:
            n = (self.n_cells - other.n_cells)
            return f"{n}# - {'* ' * n}"
        else:
            return f"Вторая клетка больше первой"

    def __mul__(self, other):
        n = (self.n_cells * other.n_cells)
        return f"{n}# - {'* ' * n}"

    def __truediv__(self, other):
        n = (self.n_cells // other.n_cells)
        return f"{n}# - {'* ' * n}"

    def make_order(self, n_cells_in_row):
        cell_str = ""
        i = self.n_cells // n_cells_in_row
        for _ in range(i):
            cell_str += "*" * n_cells_in_row + "\n"
        cell_str += "*" * (self.n_cells % n_cells_in_row)
        return cell_str


cell_1 = Cells(25)
cell_2 = Cells(2)
print(f"make_order:\n{Cells.make_order(cell_1, 15)}")
print(f"Вариант 1\nСложение: {cell_1 + cell_2}")
print(f"Вычитание: {cell_1 - cell_2}")
print(f"Умножение: {cell_1 * cell_2}")
print(f"Деление: {cell_1 / cell_2} \n")
cell_1 = Cells(5)
cell_2 = Cells(10)
print(f"Вариант 2\nСложение: {cell_1 + cell_2}")
print(f"Вычитание: {cell_1 - cell_2}")
print(f"Умножение: {cell_1 * cell_2}")
print(f"Деление: {cell_1 / cell_2}")

# ----------------------------------------------------------------------------------------------------------------------
