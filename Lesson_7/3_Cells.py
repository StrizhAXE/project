# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток
# Вычитание. Участвуют две клетки. Необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
# иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.

class Cells:
    def __init__(self, n_cells):
        self.n_cells = n_cells
        print(f"Клетка: {self.n_cells}# - {'*' * n_cells}")

    def __add__(self, other):
        n = (self.n_cells + other.n_cells)
        return f"{n}# - {'* ' * n}"

    def __sub__(self, other):
        if self.n_cells > other.n_cells:
            n = (self.n_cells - other.n_cells)
            return f"{n}# - {'* ' * n}"
        else:
            return f"Вторая клетка больше первой"

    def __mul__(self, other):
        n = (self.n_cells * other.n_cells)
        return f"{n}# - {'* ' * n}"

    def __truediv__(self, other):
        n = (self.n_cells // other.n_cells)
        return f"{n}# - {'* ' * n}"

    def make_order(self, n_cells_in_row):
        cell_str = ""
        i = self.n_cells // n_cells_in_row
        for _ in range(i):
            cell_str += "*" * n_cells_in_row + "\n"
        cell_str += "*" * (self.n_cells % n_cells_in_row)
        return cell_str


cell_1 = Cells(25)
cell_2 = Cells(2)
print(f"make_order:\n{Cells.make_order(cell_1, 15)}")
print(f"Вариант 1\nСложение: {cell_1 + cell_2}")
print(f"Вычитание: {cell_1 - cell_2}")
print(f"Умножение: {cell_1 * cell_2}")
print(f"Деление: {cell_1 / cell_2} \n")
cell_1 = Cells(5)
cell_2 = Cells(10)
print(f"Вариант 2\nСложение: {cell_1 + cell_2}")
print(f"Вычитание: {cell_1 - cell_2}")
print(f"Умножение: {cell_1 * cell_2}")
print(f"Деление: {cell_1 / cell_2}")
