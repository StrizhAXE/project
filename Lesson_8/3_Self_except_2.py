# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу
# скрипта, введя, например, команду “stop”. При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и
# отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.

class WrongType(Exception):
    """ проверяет введеный элемент на число """

    def __init__(self, user_el):
        self.el = user_el

    @property
    def check_isdigit(self):
        try:
            if self.el.isdigit():
                res = int(self.el)
                return res
            else:
                raise WrongType("Не число")
        except WrongType as Err:
            print(Err)


res_list = []
while True:
    u_inp = input("Введите число для добавления в список, для выхода X: ")
    if u_inp in ["x", "X", "х", "Х"]:
        print(f"Итоговый список: {res_list}")
        print(f"Выход -->")
        break
    else:
        WT_res = WrongType(u_inp).check_isdigit
        if WT_res is not None:
            res_list.append(WT_res)
            print(f"Итоговый список: {res_list}")
