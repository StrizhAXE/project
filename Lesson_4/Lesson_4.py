# ----------------------------------------------------------------------------------------------------------------------
# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv

_, job_hour, state = argv

print(f"Заработная плата равна: {float(job_hour) * float(state)}")

# ----------------------------------------------------------------------------------------------------------------------
# 2 Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

from random import randrange

num_list = [randrange(0, 1000, 1) for i in range(20)]
numbers = []
for i in range(1, len(num_list)):
    numbers.append(num_list[i]) if num_list[i] > num_list[i - 1] else numbers

print(f"Исходный список: {num_list}")
print(f"Сортированный список: {numbers}")

# ----------------------------------------------------------------------------------------------------------------------
# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Необходимо решить задание в одну строку. Подсказка: использовать функцию range() и генератор.

print(f"Список чисел кратных 20 и 21: {[i for i in range(20, 241) if i % 20 == 0 or i % 21 == 0]}")

# ----------------------------------------------------------------------------------------------------------------------
# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

from random import randint
source_list = [randint(0, 100) for i in range(20)]  # генерим исходный лист чисел
for i in range(len(source_list)):  # """Раширяем  рандомно повторениями 1/4 все элементов"""
    if randint(0, 3) == 3:
        source_list.insert(i, source_list[i])

res_list = []
for i in range(len(source_list)):  # Удаляем повторы
    res_list.append(source_list[i]) if source_list.count(source_list[i]) == 1 else res_list

print(f"Исходный список: {source_list}")
print(f"Список без элементов с повторами: {res_list}")

# ----------------------------------------------------------------------------------------------------------------------
# 5. Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce

print(f"Произведение четных чисел от 100 до 1000: {reduce(lambda i, i1: i * i1, [x for x in range(100, 1001, 2)])}")

# ----------------------------------------------------------------------------------------------------------------------
# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.

from itertools import count, cycle


def get_numbers(start_agr, stop_arg):
    """Функция получает список с задаными стартом и концом"""
    numbers = []
    for num in count(start_agr):
        if num < stop_arg:
            numbers.append(num)
        else:
            break
    return numbers


while True:  # запрашиваем начальные параметры у пользователя
    try:
        start = int(input("Начальное число: "))
        stop = int(input("Конечное число: ")) + 1
        stop_x = int(input("Конечное число для цикла: ")) + 1
        if start < stop:
            break
        else:
            print("Начальное число больше конечного\n")
    except ValueError:
        print("Ошибка, повторите ввод: ")

print(get_numbers(start, stop))
print("Повтор списка")

x = 0
for i in cycle(get_numbers(start, stop)):
    x += 1
    print(i)
    if x == stop_x:
        break

# ----------------------------------------------------------------------------------------------------------------------
# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор.
# Функция должна вызываться следующим образом: for el in fact(n).
# Функция отвечает за получение факториала числа,
# а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

from math import factorial


def get_fact(n_fact):
    """Функция факториала"""
    if n_fact < 100:
        for x in range(1, n_fact + 1):
            fact = factorial(x)
            yield fact
    else:
        print("Слишком большое число")


while True:  # запрашиваем начальные параметры у пользователя
    try:
        n = int(input("Конечный факториал: "))
        break
    except ValueError:
        print("Ошибка, повторите ввод: ")

i = 1
for el in get_fact(n):
    print(f"{i}! = {el}")
    i += 1
